// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/transaction_repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	repository "gitlab.ozon.dev/dmitryssaenko/financial-tg-bot/internal/repository"
)

// MockTransactionOperator is a mock of TransactionOperator interface.
type MockTransactionOperator struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionOperatorMockRecorder
}

// MockTransactionOperatorMockRecorder is the mock recorder for MockTransactionOperator.
type MockTransactionOperatorMockRecorder struct {
	mock *MockTransactionOperator
}

// NewMockTransactionOperator creates a new mock instance.
func NewMockTransactionOperator(ctrl *gomock.Controller) *MockTransactionOperator {
	mock := &MockTransactionOperator{ctrl: ctrl}
	mock.recorder = &MockTransactionOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionOperator) EXPECT() *MockTransactionOperatorMockRecorder {
	return m.recorder
}

// AddOperation mocks base method.
func (m *MockTransactionOperator) AddOperation(userID int64, categoryName string, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOperation", userID, categoryName, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOperation indicates an expected call of AddOperation.
func (mr *MockTransactionOperatorMockRecorder) AddOperation(userID, categoryName, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperation", reflect.TypeOf((*MockTransactionOperator)(nil).AddOperation), userID, categoryName, amount)
}

// GetWallet mocks base method.
func (m *MockTransactionOperator) GetWallet(userID int64) map[string][]repository.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", userID)
	ret0, _ := ret[0].(map[string][]repository.Transaction)
	return ret0
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockTransactionOperatorMockRecorder) GetWallet(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockTransactionOperator)(nil).GetWallet), userID)
}
