// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/exchange_rates_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockCurrencyExtractor is a mock of CurrencyExtractor interface.
type MockCurrencyExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyExtractorMockRecorder
}

// MockCurrencyExtractorMockRecorder is the mock recorder for MockCurrencyExtractor.
type MockCurrencyExtractorMockRecorder struct {
	mock *MockCurrencyExtractor
}

// NewMockCurrencyExtractor creates a new mock instance.
func NewMockCurrencyExtractor(ctrl *gomock.Controller) *MockCurrencyExtractor {
	mock := &MockCurrencyExtractor{ctrl: ctrl}
	mock.recorder = &MockCurrencyExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyExtractor) EXPECT() *MockCurrencyExtractorMockRecorder {
	return m.recorder
}

// GetHistoricalCurrency mocks base method.
func (m *MockCurrencyExtractor) GetHistoricalCurrency(day time.Time) (map[string]decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalCurrency", day)
	ret0, _ := ret[0].(map[string]decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricalCurrency indicates an expected call of GetHistoricalCurrency.
func (mr *MockCurrencyExtractorMockRecorder) GetHistoricalCurrency(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalCurrency", reflect.TypeOf((*MockCurrencyExtractor)(nil).GetHistoricalCurrency), day)
}

// GetLiveCurrency mocks base method.
func (m *MockCurrencyExtractor) GetLiveCurrency() (map[string]decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveCurrency")
	ret0, _ := ret[0].(map[string]decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveCurrency indicates an expected call of GetLiveCurrency.
func (mr *MockCurrencyExtractorMockRecorder) GetLiveCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveCurrency", reflect.TypeOf((*MockCurrencyExtractor)(nil).GetLiveCurrency))
}

// MockCurrencyExchanger is a mock of CurrencyExchanger interface.
type MockCurrencyExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyExchangerMockRecorder
}

// MockCurrencyExchangerMockRecorder is the mock recorder for MockCurrencyExchanger.
type MockCurrencyExchangerMockRecorder struct {
	mock *MockCurrencyExchanger
}

// NewMockCurrencyExchanger creates a new mock instance.
func NewMockCurrencyExchanger(ctrl *gomock.Controller) *MockCurrencyExchanger {
	mock := &MockCurrencyExchanger{ctrl: ctrl}
	mock.recorder = &MockCurrencyExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyExchanger) EXPECT() *MockCurrencyExchangerMockRecorder {
	return m.recorder
}

// GetMultiplier mocks base method.
func (m *MockCurrencyExchanger) GetMultiplier(currency string, date time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiplier", currency, date)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiplier indicates an expected call of GetMultiplier.
func (mr *MockCurrencyExchangerMockRecorder) GetMultiplier(currency, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiplier", reflect.TypeOf((*MockCurrencyExchanger)(nil).GetMultiplier), currency, date)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCache) Add(k string, x interface{}, d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", k, x, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCacheMockRecorder) Add(k, x, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCache)(nil).Add), k, x, d)
}

// Get mocks base method.
func (m *MockCache) Get(k string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), k)
}
