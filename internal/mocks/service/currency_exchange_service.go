// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/currency_exchange_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockRateStore is a mock of RateStore interface.
type MockRateStore struct {
	ctrl     *gomock.Controller
	recorder *MockRateStoreMockRecorder
}

// MockRateStoreMockRecorder is the mock recorder for MockRateStore.
type MockRateStoreMockRecorder struct {
	mock *MockRateStore
}

// NewMockRateStore creates a new mock instance.
func NewMockRateStore(ctrl *gomock.Controller) *MockRateStore {
	mock := &MockRateStore{ctrl: ctrl}
	mock.recorder = &MockRateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateStore) EXPECT() *MockRateStoreMockRecorder {
	return m.recorder
}

// GetBatch mocks base method.
func (m *MockRateStore) GetBatch(ctx context.Context, dates []time.Time, currencies []string) (map[string]map[string]decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", ctx, dates, currencies)
	ret0, _ := ret[0].(map[string]map[string]decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockRateStoreMockRecorder) GetBatch(ctx, dates, currencies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockRateStore)(nil).GetBatch), ctx, dates, currencies)
}

// GetDatesWithoutRate mocks base method.
func (m *MockRateStore) GetDatesWithoutRate(ctx context.Context, id int64, startedFrom time.Time) ([]time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatesWithoutRate", ctx, id, startedFrom)
	ret0, _ := ret[0].([]time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatesWithoutRate indicates an expected call of GetDatesWithoutRate.
func (mr *MockRateStoreMockRecorder) GetDatesWithoutRate(ctx, id, startedFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatesWithoutRate", reflect.TypeOf((*MockRateStore)(nil).GetDatesWithoutRate), ctx, id, startedFrom)
}

// SaveAll mocks base method.
func (m *MockRateStore) SaveAll(ctx context.Context, rates map[string]decimal.Decimal, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, rates, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockRateStoreMockRecorder) SaveAll(ctx, rates, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockRateStore)(nil).SaveAll), ctx, rates, date)
}

// MockCurrencyExtractor is a mock of CurrencyExtractor interface.
type MockCurrencyExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyExtractorMockRecorder
}

// MockCurrencyExtractorMockRecorder is the mock recorder for MockCurrencyExtractor.
type MockCurrencyExtractorMockRecorder struct {
	mock *MockCurrencyExtractor
}

// NewMockCurrencyExtractor creates a new mock instance.
func NewMockCurrencyExtractor(ctrl *gomock.Controller) *MockCurrencyExtractor {
	mock := &MockCurrencyExtractor{ctrl: ctrl}
	mock.recorder = &MockCurrencyExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyExtractor) EXPECT() *MockCurrencyExtractorMockRecorder {
	return m.recorder
}

// GetHistoricalCurrency mocks base method.
func (m *MockCurrencyExtractor) GetHistoricalCurrency(ctx context.Context, day time.Time) (map[string]decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalCurrency", ctx, day)
	ret0, _ := ret[0].(map[string]decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricalCurrency indicates an expected call of GetHistoricalCurrency.
func (mr *MockCurrencyExtractorMockRecorder) GetHistoricalCurrency(ctx, day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalCurrency", reflect.TypeOf((*MockCurrencyExtractor)(nil).GetHistoricalCurrency), ctx, day)
}

// GetLiveCurrency mocks base method.
func (m *MockCurrencyExtractor) GetLiveCurrency(ctx context.Context) (map[string]decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveCurrency", ctx)
	ret0, _ := ret[0].(map[string]decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveCurrency indicates an expected call of GetLiveCurrency.
func (mr *MockCurrencyExtractorMockRecorder) GetLiveCurrency(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveCurrency", reflect.TypeOf((*MockCurrencyExtractor)(nil).GetLiveCurrency), ctx)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCache) Add(k, x string, d time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", k, x, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCacheMockRecorder) Add(k, x, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCache)(nil).Add), k, x, d)
}

// Get mocks base method.
func (m *MockCache) Get(k string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), k)
}
